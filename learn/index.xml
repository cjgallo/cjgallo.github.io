<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Gallo | Learn on Chris Gallo | Home</title>
    <link>https://hotdogsandeggs.com/learn/</link>
    <description>Recent content in Chris Gallo | Learn on Chris Gallo | Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hotdogsandeggs.com/learn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>R Basics</title>
      <link>https://hotdogsandeggs.com/learn/r/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hotdogsandeggs.com/learn/r/basics/</guid>
      <description>Basic Building Blocks of R In the first section of swirl&amp;rsquo;s R package, you learn the basics of R. Here are my notes.
R is a calculator on steroids. Like any programming language, a big advantage is you eliminate repeating the same steps over and over again. Automation.
Variables A variable stores results of basic arithmetic (+, -, /, *, sqrt(), ^2).
Assign a variable by using the less-than sign and a dash.</description>
    </item>
    
    <item>
      <title>Workspaces and Files</title>
      <link>https://hotdogsandeggs.com/learn/r/workspaces-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hotdogsandeggs.com/learn/r/workspaces-files/</guid>
      <description>Workspaces and Files The R package, swirl, describes how to use your workspace in R on your own machine.
R uses a common API to interact with files.
Special Functions and Commands getwd() - determines current working directory on your machine
ls() - lists all the objects in your workspace, similar to the Unix command ls
list.files() or dir() - lists all the files in your working directory
args() - shows what arguments a function can take, example: args(list.</description>
    </item>
    
    <item>
      <title>Sequences of Numbers</title>
      <link>https://hotdogsandeggs.com/learn/r/sequences-of-numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hotdogsandeggs.com/learn/r/sequences-of-numbers/</guid>
      <description>Sequences of Numbers How to create sequences brought to you by swirl.
Examples 1:20 - counts upwards to 20 in incremets of 1 creating a sequence of every integer between (and including) 1 and 20.
pi:10 - creates a vector starting with 3.14 (pi) and increasing in increments of 1. The upper limit of 10 is never reached, since the next number in our sequence would be greater than 10.</description>
    </item>
    
    <item>
      <title>Types of Vectors</title>
      <link>https://hotdogsandeggs.com/learn/r/vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hotdogsandeggs.com/learn/r/vectors/</guid>
      <description>Types of Vectors Types of vectors covered in section 4 of swirl.
 atomic vectors: exactly one data type
 lists: multiple data types
  Types of Atomic Vectors  numeric logical character integer complex  Logical Vectors Contain the values TRUE, FALSE, and NA (not available).
For example, num_vect &amp;lt;- c(0.4, 45, -5, 77) and tf &amp;lt;- num_vect &amp;lt; 1 results in a vector of 4 logical values: TRUE FALSE TRUE FALSE</description>
    </item>
    
    <item>
      <title>Missing Values</title>
      <link>https://hotdogsandeggs.com/learn/r/missing-values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hotdogsandeggs.com/learn/r/missing-values/</guid>
      <description>Missing Values Section 5 of swirl covers missing values. Important because there might be an underlying cause or pattern for why the values are missing.
2 types:
 NA represents any value that is missing or not available.
 NaN means not a number, 0 / 0 and Inf - Inf both result in NaN
  Let&amp;rsquo;s focus on NA for this section.
Examples x &amp;lt;- c(4, NA, 5, NA) and x * 3 results in 12, NA, 15, NA</description>
    </item>
    
    <item>
      <title>Subsetting Vectors</title>
      <link>https://hotdogsandeggs.com/learn/r/subsetting-vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hotdogsandeggs.com/learn/r/subsetting-vectors/</guid>
      <description>Subsetting Vectors This section of swirl introduces how to extract elements from a vector based on certain conditions.
You may not need a full set of data or the full vector. Maybe you only want the first 10 elements, or maybe only elements that aren&amp;rsquo;t NA, or maybe only ones that correspond to a specific variable.
How to Select a Subset Use an index vector in square brackets immediately following the name of the vector.</description>
    </item>
    
    <item>
      <title>Matrices and Data Frames</title>
      <link>https://hotdogsandeggs.com/learn/r/matrices-data-frames/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hotdogsandeggs.com/learn/r/matrices-data-frames/</guid>
      <description>Matrices and Data Frames Swirl gives examples of how to store rectangular or tabular (rows and columns) data in this section.
Matrices only contain a single class of data.
Data frames consist of many different classes of data.
Functions dim() shows the dimensions of any object.
length() shows the length of any object.
Example is giving a vector a dim attribute, i.e. dim(my_vector) &amp;lt;- c(4, 5)
And dim(my_vector) results in 4 5</description>
    </item>
    
  </channel>
</rss>